package com.zngk.dao.imp;

import java.util.Calendar;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;

import com.zngk.entity.IDomain;
import com.zngk.entity.User;
import com.zngk.entity.UserCenterPage;
import com.zngk.util.OperationLogUtil;
import com.zngk.util.PageSqlUtils;
public abstract class AbstractDao{
	
	private final Log logger = LogFactory.getLog(this.getClass());
	
	@Autowired
    private JdbcTemplate jdbcTemplate;
	
	@Resource(name="wifiJdbcTemplate")
	private JdbcTemplate wifiJdbcTemplate;
	@Autowired
	protected OperationLogUtil operationLogUtil;
	

	/**
	 * 主键锁
	 */
	private static final Object PRIMARY_LOCK = new Object();
	
	
	public void add(String sqlStr)
	{
		logger.info("执行操作："+sqlStr);
		jdbcTemplate.execute(sqlStr);
	}
	
	public void add(String sqlStr,Object[] params,int[] types)
	{
		logger.info("执行操作："+sqlStr);
		jdbcTemplate.update(sqlStr,params,types);
	}
	
	
	public void add(IDomain domain,JdbcTemplate jdbcTemplate,User userinfo,String ip,String drczno) throws Exception
	{
		String sqlStr = "";
		logger.info("执行操作："+sqlStr);
		jdbcTemplate.execute(sqlStr);
	}
	
	public void update(JdbcTemplate jdbcTemplate, String drczno) {
		
	}
	
	public int update(String updSql,Object[] param,int[] types)
	{
		logger.info("执行更新操作："+updSql);
		int count = jdbcTemplate.update(updSql, param, types);
		return count;
	}

	public int delete(String delSql,Object[] param,int[] types)
	{
		logger.info("执行删除操作："+delSql);
		return update(delSql, param, types);
	}
	
	@SuppressWarnings("rawtypes")
	public List queryForList(String sqlStr)
	{
		logger.info("执行操作："+sqlStr);
		List list=  jdbcTemplate.queryForList(sqlStr);
		return list;
	}
	
	@SuppressWarnings("rawtypes")
	public List queryForList(String sqlStr,Object[] paramArray,int[] typeArray)
	{
		logger.info("执行操作："+sqlStr);
		List list=  jdbcTemplate.queryForList(sqlStr,paramArray,typeArray);
		return list;
	}
	public String beforeImportSave(User userinfo){
		return "";
	}
	
	//布控结果的列表查询
	public UserCenterPage controlList(HttpSession httpSession, HttpServletRequest request,String sql,Object[] args,int[] argTypes) {
		 //总页数
        int page = request.getParameter("page")==null?1:new Integer(request.getParameter("page"));
        //
        int pageSize = request.getParameter("pageSize")==null?10:new Integer(request.getParameter("pageSize"));
		// 查询部分字段用于显示页面
		UserCenterPage userCenterPage = UserCenterPage.getInstance(page,pageSize);
		String totalSQL = "select count(0) from (" + sql + ")";
		logger.info("执行操作："+totalSQL);
		Integer listTotal = jdbcTemplate.queryForObject(totalSQL, args, argTypes, Integer.class);
		userCenterPage.setAllRecordNO(listTotal);
		// 封装总页数
		Integer allPageNumber = listTotal / pageSize + (listTotal % pageSize == 0 ? 0 : 1);
		userCenterPage.setAllPageNO(allPageNumber);
		String sqlString = PageSqlUtils.createPageSql(sql, page, pageSize);
		logger.info("获取数据SQL ：" + sqlString);
		List<Map<String, Object>> list = jdbcTemplate.queryForList(sqlString, args, argTypes);
		userCenterPage.setMapList(list);
		return userCenterPage;
	}
	
	public UserCenterPage controlList(HttpSession httpSession,Integer page ,Integer pageSize ,String sql,Object[] args,int[] argTypes) {
		// 查询部分字段用于显示页面
		UserCenterPage userCenterPage = UserCenterPage.getInstance(page,pageSize);
		String totalSQL = "select count(0) from (" + sql + ")";
		logger.info("执行操作："+totalSQL);
		Integer listTotal = jdbcTemplate.queryForObject(totalSQL, args, argTypes, Integer.class);
		userCenterPage.setAllRecordNO(listTotal);
		// 封装总页数
		Integer allPageNumber = listTotal / pageSize + (listTotal % pageSize == 0 ? 0 : 1);
		userCenterPage.setAllPageNO(allPageNumber);
		String sqlString = PageSqlUtils.createPageSql(sql, page, pageSize);
		logger.info("获取数据SQL ：" + sqlString);
		List<Map<String, Object>> list = jdbcTemplate.queryForList(sqlString, args, argTypes);
		userCenterPage.setMapList(list);
		return userCenterPage;
	}
	
	//布控结果的列表查询
	public UserCenterPage controlList(HttpSession httpSession, HttpServletRequest request, Integer page, Integer pageSize,String sql) {
		
		// 查询部分字段用于显示页面
		UserCenterPage userCenterPage = UserCenterPage.getInstance(page,pageSize);
		String totalSQL = "select count(0) from (" + sql + ")";
		Integer listTotal = jdbcTemplate.queryForObject(totalSQL,Integer.class);
		userCenterPage.setAllRecordNO(listTotal);
		// 封装总页数
		Integer allPageNumber = listTotal / pageSize + (listTotal % pageSize == 0 ? 0 : 1);
		userCenterPage.setAllPageNO(allPageNumber);
		String sqlString = PageSqlUtils.createPageSql(sql, page, pageSize);
		logger.info("获取数据SQL ：" + sqlString);
		List<Map<String, Object>> list = jdbcTemplate.queryForList(sqlString);
		userCenterPage.setMapList(list);
		return userCenterPage;
	}
	public UserCenterPage controlYjxxList(Integer page, Integer pageSize,String sql) {
		
		// 查询部分字段用于显示页面
		UserCenterPage userCenterPage = UserCenterPage.getInstance(page,pageSize);
		String totalSQL = "select count(0) from (" + sql + ")";
		Integer listTotal = jdbcTemplate.queryForObject(totalSQL,Integer.class);
		userCenterPage.setAllRecordNO(listTotal);
		// 封装总页数
		Integer allPageNumber = listTotal / pageSize + (listTotal % pageSize == 0 ? 0 : 1);
		userCenterPage.setAllPageNO(allPageNumber);
		String sqlString = PageSqlUtils.createPageSql(sql, page, pageSize);
		logger.info("获取数据SQL ：" + sqlString);
		List<Map<String, Object>> list = jdbcTemplate.queryForList(sqlString);
		userCenterPage.setMapList(list);
		return userCenterPage;
	}
	
	//布控结果的列表查询
		public UserCenterPage controlWifiList(HttpServletRequest request,String sql) {
			int page = request.getParameter("page")==null?1:new Integer(request.getParameter("page"));
	        int pageSize = request.getParameter("pageSize")==null?10:new Integer(request.getParameter("pageSize"));
	        UserCenterPage userCenterPage = UserCenterPage.getInstance(page,pageSize);
			String totalSQL = "select count(0) from (" + sql + ")";
			Integer listTotal = wifiJdbcTemplate.queryForObject(totalSQL,Integer.class);
			userCenterPage.setAllRecordNO(listTotal);
			// 封装总页数
			Integer allPageNumber = listTotal / pageSize + (listTotal % pageSize == 0 ? 0 : 1);
			userCenterPage.setAllPageNO(allPageNumber);
			String sqlString = PageSqlUtils.createPageSql(sql, page, pageSize);
			logger.info("获取数据SQL ：" + sqlString);
			List<Map<String, Object>> list = wifiJdbcTemplate.queryForList(sqlString);
			userCenterPage.setMapList(list);
			return userCenterPage;
		}
		//布控结果的列表查询
		public UserCenterPage controlList(HttpServletRequest request,String sql) {
			int page = request.getParameter("page")==null?1:new Integer(request.getParameter("page"));
	        int pageSize = request.getParameter("pageSize")==null?10:new Integer(request.getParameter("pageSize"));
	        UserCenterPage userCenterPage = UserCenterPage.getInstance(page,pageSize);
			String totalSQL = "select count(0) from (" + sql + ")";
			Integer listTotal = jdbcTemplate.queryForObject(totalSQL,Integer.class);
			userCenterPage.setAllRecordNO(listTotal);
			// 封装总页数
			Integer allPageNumber = listTotal / pageSize + (listTotal % pageSize == 0 ? 0 : 1);
			userCenterPage.setAllPageNO(allPageNumber);
			String sqlString = PageSqlUtils.createPageSql(sql, page, pageSize);
			logger.info("获取数据SQL ：" + sqlString);
			List<Map<String, Object>> list = jdbcTemplate.queryForList(sqlString);
			userCenterPage.setMapList(list);
			return userCenterPage;
		}
	
	/**
	 * 获取主键
	 * 
	 * @return
	 * @throws Exception
	 */
	public synchronized static long getPrimaryID() throws Exception {
		synchronized (PRIMARY_LOCK) {
			long id = 0;
			id = Calendar.getInstance().getTimeInMillis();
			return id;
		}
	}
	public String searchRyxm(String zkno){
		String searchSql ="select ryxm,rysfzh from  t_zk_ryxxb where zkno ='"+zkno+"'";
		Map<String, Object> map = jdbcTemplate.queryForMap(searchSql);
		String ryxm = map.get("RYXM")+"";
		String sfzh = map.get("RYSFZH")+"";
		return ryxm +" 身份证号 : " +sfzh;
	}
	public String searchRedRyxm(String rlno){
		String searchSql ="select name ,idcard from T_ZK_RedList where rlno ='"+rlno+"'";
		Map<String, Object> map = jdbcTemplate.queryForMap(searchSql);
		String ryxm = map.get("NAME")+"";
		String sfzh = map.get("IDCARD")+"";
		return ryxm +" 身份证号 : " +sfzh;
	}
}
