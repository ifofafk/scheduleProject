package com.zngk.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.zngk.common.constant.user.UserEmun;
import com.zngk.dto.YjcxDto;
import com.zngk.entity.PagePublicData;
import com.zngk.entity.PublicData;
import com.zngk.entity.User;
import com.zngk.exception.ServiceException;
import com.zngk.service.ToLogonService;
import com.zngk.service.YjcxService;
import com.zngk.util.PubMethod;  
 
@Api(value="yjcx")  
@Controller  
@RequestMapping(value="yjcx")  
public class YjcxController { 
	@Autowired
	private YjcxService yjcxService;
	
	@Autowired
	private ToLogonService tologonservies;
	
    @RequestMapping(value = "/queryYjxxList",method=RequestMethod.POST) 
    @ResponseBody
    @ApiOperation(value="预警查询列表",httpMethod="POST",notes="预警查询列表",response=PublicData.class)  
    public PagePublicData queryYjxxList(@RequestBody YjcxDto yjcxDto,@RequestParam(value = "outterJh",required=false)String outterJh) {
    	HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
		HttpSession httpSession = request.getSession();
		
    	//第三方调用接口，必须自带警号账号参数
		if(StringUtils.isNotBlank(outterJh)) {
			User userTemp = (User)httpSession.getAttribute("userinfo");
			//如果当前session里有用户
			if(userTemp != null) {
				//如果当前用户session还在
				if(outterJh.equals(userTemp.getAccount())) {
					//如果是本人在使用，改成外部调用(前端登录时获取的isoutter==0)
					if(userTemp.getIsOutter() == 0){
						userTemp.setIsOutter(1);
					}
				}else{
					tologonservies.jkLogin(request, httpSession, outterJh);
				}
			}else{
				tologonservies.jkLogin(request, httpSession, outterJh);
			}
		}
		//指定账号登录(开放页面调用)
		if(yjcxDto.getJkFlag() == 1) {
			tologonservies.jkLogin(request, httpSession, "000000");
		}
    	
    	User user = (User)httpSession.getAttribute("userinfo");
    	if(user == null) {
    		throw new ServiceException(UserEmun.SESSION_EXPIRES.getCode(), UserEmun.SESSION_EXPIRES.getDesc());
    	}
    	PagePublicData publicData = yjcxService.queryYjxxList(yjcxDto, user);
        return publicData;
    } 
}  